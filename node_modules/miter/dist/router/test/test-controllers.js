"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_policies_1 = require("./test-policies");
const controller_decorator_1 = require("../../decorators/router/controller.decorator");
const get_decorator_1 = require("../../decorators/router/routes/get.decorator");
const post_decorator_1 = require("../../decorators/router/routes/post.decorator");
let EmptyController = class EmptyController {
};
EmptyController = __decorate([
    controller_decorator_1.Controller()
], EmptyController);
exports.EmptyController = EmptyController;
class ControllerSansDecorator {
}
exports.ControllerSansDecorator = ControllerSansDecorator;
let EmptyControllerChild = class EmptyControllerChild {
};
EmptyControllerChild = __decorate([
    controller_decorator_1.Controller()
], EmptyControllerChild);
exports.EmptyControllerChild = EmptyControllerChild;
let EmptyControllerRoot = class EmptyControllerRoot {
};
EmptyControllerRoot = __decorate([
    controller_decorator_1.Controller({ controllers: [EmptyControllerChild] })
], EmptyControllerRoot);
exports.EmptyControllerRoot = EmptyControllerRoot;
let SimpleController = class SimpleController {
    a(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    b(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    c(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
};
__decorate([
    get_decorator_1.Get('a'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SimpleController.prototype, "a", null);
__decorate([
    get_decorator_1.Get('b'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SimpleController.prototype, "b", null);
__decorate([
    get_decorator_1.Get('c'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SimpleController.prototype, "c", null);
SimpleController = __decorate([
    controller_decorator_1.Controller()
], SimpleController);
exports.SimpleController = SimpleController;
let SimpleChildController = class SimpleChildController extends SimpleController {
    x(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    y(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    z(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
};
__decorate([
    get_decorator_1.Get('x'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SimpleChildController.prototype, "x", null);
__decorate([
    get_decorator_1.Get('y'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SimpleChildController.prototype, "y", null);
__decorate([
    get_decorator_1.Get('z'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SimpleChildController.prototype, "z", null);
SimpleChildController = __decorate([
    controller_decorator_1.Controller()
], SimpleChildController);
exports.SimpleChildController = SimpleChildController;
let SimpleControllerRoot = class SimpleControllerRoot {
};
SimpleControllerRoot = __decorate([
    controller_decorator_1.Controller({
        controllers: [SimpleController]
    })
], SimpleControllerRoot);
exports.SimpleControllerRoot = SimpleControllerRoot;
let MultiRouteController = class MultiRouteController {
    multi(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
};
__decorate([
    get_decorator_1.Get('a'),
    get_decorator_1.Get('b'),
    post_decorator_1.Post('x'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], MultiRouteController.prototype, "multi", null);
MultiRouteController = __decorate([
    controller_decorator_1.Controller()
], MultiRouteController);
exports.MultiRouteController = MultiRouteController;
let PhishingController = class PhishingController {
    someFakeFunction(...args) { }
    anotherOne() { }
    masqueradingAsRoutes(name, age) { }
    withTheSameSignature(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
};
PhishingController = __decorate([
    controller_decorator_1.Controller()
], PhishingController);
exports.PhishingController = PhishingController;
let ComplexController = class ComplexController {
    healthCheck(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    transformRoutePathPart(routeFnName, part) {
        return routeFnName + part.repeat(3);
    }
    transformRoutePath(routeFnName, path) {
        return path.toUpperCase();
    }
    transformRoutePolicies(routeFnName, fullPath, policies) {
        return [test_policies_1.Policy3, ...policies];
    }
    transformRoute(route) {
        if (route.routeFnName === 'ambivalent')
            return;
        return route.routeFnName !== 'skipThisRoute';
    }
};
__decorate([
    get_decorator_1.Get({
        path: 'x',
        policies: [test_policies_1.Policy2]
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], ComplexController.prototype, "healthCheck", null);
ComplexController = __decorate([
    controller_decorator_1.Controller({
        path: 'api',
        policies: [test_policies_1.Policy1]
    })
], ComplexController);
exports.ComplexController = ComplexController;
let SkipRouteController = class SkipRouteController {
    healthCheck(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    transformRoute(route) {
        return false;
    }
};
__decorate([
    get_decorator_1.Get('health-check'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], SkipRouteController.prototype, "healthCheck", null);
SkipRouteController = __decorate([
    controller_decorator_1.Controller()
], SkipRouteController);
exports.SkipRouteController = SkipRouteController;
let KeepRouteController = class KeepRouteController {
    healthCheck(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    transformRoute(route) {
        return true;
    }
};
__decorate([
    get_decorator_1.Get('health-check'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], KeepRouteController.prototype, "healthCheck", null);
KeepRouteController = __decorate([
    controller_decorator_1.Controller()
], KeepRouteController);
exports.KeepRouteController = KeepRouteController;
let AmbivalentController = class AmbivalentController {
    healthCheck(req, res) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    transformRoute(route) {
        return;
    }
};
__decorate([
    get_decorator_1.Get('health-check'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AmbivalentController.prototype, "healthCheck", null);
AmbivalentController = __decorate([
    controller_decorator_1.Controller()
], AmbivalentController);
exports.AmbivalentController = AmbivalentController;
//# sourceMappingURL=test-controllers.js.map