"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const injectable_decorator_1 = require("../../decorators/services/injectable.decorator");
const orm_1 = require("./orm");
let DatabaseMetadata = DatabaseMetadata_1 = class DatabaseMetadata {
    constructor(_meta) {
        this._meta = _meta;
        this._port = 3306;
        if (typeof _meta.host === 'string')
            this._domain = _meta.host;
        else {
            this._domain = _meta.host.domain;
            if (_meta.host.port)
                this._port = _meta.host.port;
        }
        this._minPool = (_meta.pool && _meta.pool.min) || 5;
        this._maxPool = (_meta.pool && _meta.pool.max) || 1000;
        this._idlePool = (_meta.pool && _meta.pool.idle) || 5 * 60 * 1000;
    }
    get originalMeta() {
        return this._meta;
    }
    get name() {
        return this._meta.name;
    }
    get user() {
        return this._meta.user;
    }
    get password() {
        return this._meta.password;
    }
    get host() {
        return { domain: this._domain, port: this._port };
    }
    get dialect() {
        return this._meta.dialect || 'mysql';
    }
    get charset() {
        return this._meta.charset || 'utf8';
    }
    get pool() {
        return { min: this._minPool, max: this._maxPool, idle: this._idlePool };
    }
};
DatabaseMetadata = DatabaseMetadata_1 = __decorate([
    injectable_decorator_1.Injectable({
        provide: {
            useCallback: function (meta) {
                let dbMeta = meta.originalMeta && meta.originalMeta.db;
                return !!dbMeta ? new DatabaseMetadata_1(dbMeta) : null;
            },
            deps: [orm_1.OrmMetadata],
            cache: true
        }
    }),
    __metadata("design:paramtypes", [Object])
], DatabaseMetadata);
exports.DatabaseMetadata = DatabaseMetadata;
var DatabaseMetadata_1;
//# sourceMappingURL=database.js.map