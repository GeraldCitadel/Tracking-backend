"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const service_decorator_1 = require("../decorators/services/service.decorator");
const orm_transform_service_1 = require("./orm-transform.service");
const pluralize_1 = require("../util/pluralize");
let SnakeCaseOrmTransformService = class SnakeCaseOrmTransformService extends orm_transform_service_1.OrmTransformService {
    constructor() {
        super();
    }
    start() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("start").call(this);
        });
    }
    transformModel(modelMeta) {
        modelMeta.underscored = true;
        return modelMeta;
    }
    transformModelName(className) {
        let parts = [...this.splitOnWords(className)].filter(Boolean);
        if (!parts.length)
            return null;
        parts[parts.length - 1] = pluralize_1.pluralize(parts[parts.length - 1]);
        return parts.map(pt => pt.toLowerCase()).join('_');
    }
    transformColumnName(fieldName) {
        let parts = [...this.splitOnWords(fieldName)].filter(Boolean);
        if (!parts.length)
            return null;
        return parts.map(pt => pt.toLowerCase()).join('_');
    }
    transformAssociationColumnName(fieldName) {
        return this.transformColumnName(super.transformAssociationColumnName(fieldName) || fieldName);
    }
    *splitOnWords(name) {
        if (!name)
            return;
        let currentWord = '';
        for (let q = 0; q < name.length; q++) {
            let chr = name[q];
            if (chr.match(/[A-Z]/)) {
                if (currentWord)
                    yield currentWord;
                currentWord = chr;
            }
            else if (chr == '_') {
                if (currentWord)
                    yield currentWord;
                currentWord = '';
            }
            else
                currentWord += chr;
        }
        if (currentWord)
            yield currentWord;
    }
};
SnakeCaseOrmTransformService = __decorate([
    service_decorator_1.Service(),
    __metadata("design:paramtypes", [])
], SnakeCaseOrmTransformService);
exports.SnakeCaseOrmTransformService = SnakeCaseOrmTransformService;
//# sourceMappingURL=snake-case-orm-transform.service.js.map