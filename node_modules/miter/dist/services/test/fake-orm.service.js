"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const injector_1 = require("../../core/injector");
const injectable_decorator_1 = require("../../decorators/services/injectable.decorator");
const orm_service_1 = require("../orm.service");
const cls_namespace_service_1 = require("../cls-namespace.service");
const fake_transaction_1 = require("./fake-transaction");
let FakeORMService = class FakeORMService extends orm_service_1.ORMService {
    constructor(injector, namespace) {
        super(injector, namespace);
    }
    transaction(transactionName, transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            let parentTransaction = transaction;
            if (typeof parentTransaction === 'undefined')
                parentTransaction = this.currentTransaction;
            let t = new fake_transaction_1.FakeTransaction(transactionName, parentTransaction);
            this.currentTransaction = t;
            return t;
        });
    }
};
FakeORMService = __decorate([
    injectable_decorator_1.Injectable(),
    __metadata("design:paramtypes", [injector_1.Injector,
        cls_namespace_service_1.ClsNamespaceService])
], FakeORMService);
exports.FakeORMService = FakeORMService;
//# sourceMappingURL=fake-orm.service.js.map