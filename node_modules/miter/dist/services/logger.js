"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const injectable_decorator_1 = require("../decorators/services/injectable.decorator");
const logger_core_1 = require("./logger-core");
let Logger = Logger_1 = class Logger {
    constructor(core, _subsystem) {
        this.core = core;
        this._subsystem = _subsystem;
    }
    get subsystem() {
        return this._subsystem;
    }
    static fromSubsystem(core, subsystem) {
        return core.getSubsystem(subsystem);
    }
    log(message, ...optionalParams) {
        this.core.log(this.subsystem, message, ...optionalParams);
    }
    trace(message, ...optionalParams) {
        this.core.trace(this.subsystem, message, ...optionalParams);
    }
    error(message, ...optionalParams) {
        this.core.error(this.subsystem, message, ...optionalParams);
    }
    info(message, ...optionalParams) {
        this.core.info(this.subsystem, message, ...optionalParams);
    }
    warn(message, ...optionalParams) {
        this.core.warn(this.subsystem, message, ...optionalParams);
    }
    verbose(message, ...optionalParams) {
        this.core.verbose(this.subsystem, message, ...optionalParams);
    }
};
Logger = Logger_1 = __decorate([
    injectable_decorator_1.Injectable({
        provide: {
            useCallback: Logger_1.fromSubsystem,
            deps: [() => logger_core_1.LoggerCore, 'name']
        }
    }),
    __metadata("design:paramtypes", [logger_core_1.LoggerCore, String])
], Logger);
exports.Logger = Logger;
var Logger_1;
//# sourceMappingURL=logger.js.map