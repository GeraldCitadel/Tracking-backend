"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const expressJwt = require("express-jwt");
const policy_decorator_1 = require("../decorators/policies/policy.decorator");
const jwt_1 = require("../metadata/server/jwt");
const logger_core_1 = require("../services/logger-core");
const logger_1 = require("../services/logger");
const wrap_promise_1 = require("../util/wrap-promise");
const http_status_type_1 = require("../util/http-status-type");
let JwtBasePolicy = class JwtBasePolicy {
    constructor(jwtMeta, loggerCore, credentialsRequired) {
        this.jwtMeta = jwtMeta;
        this.credentialsRequired = credentialsRequired;
        if (!jwtMeta)
            return;
        this.jwtHandler = expressJwt({
            secret: jwtMeta.secret,
            userProperty: this.property,
            credentialsRequired: false,
            getToken: req => this.getToken(req)
        });
        this.logger = logger_1.Logger.fromSubsystem(loggerCore, 'jwt-policy');
    }
    get property() {
        if (!this.jwtMeta)
            return undefined;
        return this.jwtMeta.tokenProperty;
    }
    handle(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let jwt = yield this.getJwt(req, res);
            let reqProperty = this.property;
            if (jwt !== null)
                jwt = req[reqProperty] = yield this.fromJson(jwt);
            if (this.credentialsRequired && !jwt) {
                res.status(http_status_type_1.HTTP_STATUS_UNAUTHORIZED).json({ msg: 'Invalid Authorization header.' });
            }
            return jwt;
        });
    }
    getToken(req) {
        if (req.headers.authorization) {
            let split = req.headers.authorization.split(' ');
            if (split[0] === 'Bearer' && split.length === 2) {
                return split[1];
            }
        }
        return null;
    }
    getJwt(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let reqProperty = this.property;
            if (this.jwtHandler) {
                try {
                    yield wrap_promise_1.wrapPromise(this.jwtHandler, req, res);
                }
                catch (e) {
                    this.logger.verbose(`express-jwt failed to parse 'Authorization' header.`);
                    this.logger.verbose(`'Authorization' header: '${req.header('Authorization')}'`);
                }
            }
            return req[reqProperty] = req[reqProperty] || null;
        });
    }
    fromJson(json) {
        return __awaiter(this, void 0, void 0, function* () {
            return json;
        });
    }
};
JwtBasePolicy = __decorate([
    policy_decorator_1.Policy(),
    __metadata("design:paramtypes", [jwt_1.JwtMetadata,
        logger_core_1.LoggerCore, Boolean])
], JwtBasePolicy);
exports.JwtBasePolicy = JwtBasePolicy;
//# sourceMappingURL=jwt-base.policy.js.map