"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const server_1 = require("./server");
const service_decorator_1 = require("../decorators/services/service.decorator");
class Miter {
    static launch(meta) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverInst = new server_1.Server(meta);
            yield serverInst.init();
            return serverInst;
        });
    }
    static task(meta) {
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            let metaFn = (typeof meta === 'function' ? meta : meta.task);
            let launchMeta = (typeof meta === 'function' ? {} : meta);
            delete launchMeta.task;
            delete launchMeta.port;
            delete launchMeta.router;
            delete launchMeta.allowCrossOrigin;
            if (!launchMeta.logLevel)
                launchMeta.logLevel = 'warn';
            else if (typeof launchMeta.logLevel !== 'string' && !launchMeta.logLevel['default']) {
                launchMeta.logLevel['default'] = 'warn';
            }
            let TaskService = class TaskService {
                constructor(server) {
                    this.server = server;
                }
                start() {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield metaFn(this.server, ...args);
                    });
                }
            };
            TaskService = __decorate([
                service_decorator_1.Service(),
                __metadata("design:paramtypes", [server_1.Server])
            ], TaskService);
            if (!launchMeta.services)
                launchMeta.services = [];
            launchMeta.services.push(TaskService);
            let serverInst = yield Miter.launch(launchMeta);
            try {
                yield serverInst.shutdown();
            }
            finally {
                process.exit(serverInst.errorCode);
            }
        });
    }
    static normalizePort(val) {
        let port = parseInt(val, 10);
        if (isNaN(port)) {
            return val;
        }
        if (port >= 0) {
            return port;
        }
        throw new Error(`Failed to normalize port: ${val}`);
    }
}
exports.Miter = Miter;
//# sourceMappingURL=miter.js.map