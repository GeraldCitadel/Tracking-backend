"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("../sequelize");
const fake_transaction_1 = require("../impl/test/fake-transaction");
class FakeSequelize extends sequelize_1.Sequelize {
    constructor(core, clsNamespace, ...models) {
        super({
            enabled: true,
            models: [...models],
            recreate: false
        }, {}, core, core.getSubsystem('orm'), clsNamespace);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    define(modelName, attributes, options) {
        throw new Error(`Invalid operation on FakeSequelize: I don't know how to define models!`);
    }
    transaction(transactionName, transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            let parentTransaction = transaction;
            if (typeof parentTransaction === 'undefined')
                parentTransaction = this.currentTransaction;
            let t = new fake_transaction_1.FakeTransaction(transactionName, parentTransaction);
            this.currentTransaction = t;
            return t;
        });
    }
}
exports.FakeSequelize = FakeSequelize;
//# sourceMappingURL=fake-sequelize.js.map