"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class FakeDb {
    create(t) {
        return __awaiter(this, void 0, void 0, function* () { return t; });
    }
    findById(id, options) {
        return __awaiter(this, void 0, void 0, function* () { return null; });
    }
    findOne(query) {
        return __awaiter(this, void 0, void 0, function* () { return null; });
    }
    findOrCreate(query, defaults) {
        return __awaiter(this, void 0, void 0, function* () { return [defaults, true]; });
    }
    findAndCountAll(query) {
        return __awaiter(this, void 0, void 0, function* () { return void (0); });
    }
    findAll(query) {
        return __awaiter(this, void 0, void 0, function* () { return []; });
    }
    all(query) {
        return __awaiter(this, void 0, void 0, function* () { return []; });
    }
    count(query) {
        return __awaiter(this, void 0, void 0, function* () { return 0; });
    }
    max(field) {
        return __awaiter(this, void 0, void 0, function* () { return 0; });
    }
    min(field) {
        return __awaiter(this, void 0, void 0, function* () { return 0; });
    }
    sum(field) {
        return __awaiter(this, void 0, void 0, function* () { return 0; });
    }
    save(t) {
        return __awaiter(this, void 0, void 0, function* () { return t; });
    }
    update(query, replace, returning) {
        return __awaiter(this, void 0, void 0, function* () { return void (0); });
    }
    updateOrCreate(query, defaults) {
        return __awaiter(this, void 0, void 0, function* () { return [defaults, true]; });
    }
    destroy(query) {
        return __awaiter(this, void 0, void 0, function* () { return void (0); });
    }
    fromJson(json) { return json; }
}
exports.FakeDb = FakeDb;
//# sourceMappingURL=fake-db.js.map